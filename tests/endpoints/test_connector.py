# Generated by CodiumAI

import pytest

from pyfivetran.endpoints.connector import Connector, Endpoint, Client, datetime, ConnectorEndpoint, GeneralApiResponse, ApiError

class TestConnector:

    # Connector can be instantiated with required parameters
    def test_instantiation_with_required_parameters(self):
        endpoint = Endpoint(Client())  # Instantiate the Endpoint object with a Client object
        connector = Connector(
            fivetran_id='123',
            service='service',
            schema='schema',
            paused=False,
            sync_frequency=60,
            pause_after_trial=False,
            group_id='group',
            connected_by='user',
            service_version=1,
            created_at=datetime.now(),
            endpoint=endpoint  # Provide the 'endpoint' argument
        )

        assert connector.fivetran_id == '123'
        assert connector.service == 'service'
        assert connector.schema == 'schema'
        assert connector.paused == False
        assert connector.sync_frequency == 60
        assert connector.pause_after_trial == False
        assert connector.group_id == 'group'
        assert connector.connected_by == 'user'
        assert connector.service_version == 1
        assert isinstance(connector.created_at, datetime)

    # Connector can be modified with valid parameters
    def test_modification_with_valid_parameters(self, mocker):
        endpoint_mock = mocker.Mock()
        connector = Connector(
            fivetran_id='123',
            service='service',
            schema='schema',
            paused=False,
            sync_frequency=60,
            pause_after_trial=False,
            group_id='group',
            connected_by='user',
            service_version=1,
            created_at=datetime.now(),
            endpoint=endpoint_mock
        )

        response_mock = mocker.Mock()
        response_mock.json.return_value = GeneralApiResponse(code=200, message=None, data=None)
        mocker.patch.object(endpoint_mock, '_request', return_value=response_mock)

        response = connector.modify(
            config={'key': 'value'},
            auth={'username': 'user', 'password': 'pass'},
            paused=True,
            trust_certificates=True,
            trust_fingerprints=True,
            daily_sync_time='12:00',
            run_setup_tests=True,
            sync_frequency=30
        )

        assert response['code'] == 200
        assert response['message'] is None
        assert response['data'] is None
        assert connector.config == {'key': 'value'}
        assert connector.auth == {'username': 'user', 'password': 'pass'}
        assert connector.paused == True
        assert connector.trust_certificates == True
        assert connector.trust_fingerprints == True
        assert connector.daily_sync_time == '12:00'
        assert connector.run_setup_tests == True
        assert connector.sync_frequency == 30

    # Connector can be deleted
    def test_deletion_with_mock_client(self, mocker):
        endpoint = ConnectorEndpoint(client=mocker.Mock())
        connector = Connector(
            fivetran_id='123',
            service='service',
            schema='schema',
            paused=False,
            sync_frequency=60,
            pause_after_trial=False,
            group_id='group',
            connected_by='user',
            service_version=1,
            created_at=datetime.now(),
            endpoint=endpoint
        )

        mock_response = mocker.Mock()
        mock_response.raise_for_status.return_value = None
        mock_response.json.return_value = GeneralApiResponse(code=200, message=None, data=None)
        mocker.patch.object(endpoint.client, 'delete', return_value=mock_response)

        response = connector.delete()

        assert response['code'] == 200
        assert response['message'] is None
        assert response['data'] is None
        assert connector._is_deleted == True

    # Connector cannot be modified with invalid sync_frequency
    def test_modification_with_invalid_sync_frequency(self, mocker):
        endpoint_mock = mocker.Mock()
        connector = Connector(
            fivetran_id='123',
            service='service',
            schema='schema',
            paused=False,
            sync_frequency=60,
            pause_after_trial=False,
            group_id='group',
            connected_by='user',
            service_version=1,
            created_at=datetime.now(),
            endpoint=endpoint_mock
        )

        mocker.patch.object(endpoint_mock, '_request', return_value=GeneralApiResponse(code=400, message='Invalid sync_frequency value provided', data=None))

        with pytest.raises(ApiError):
            connector.modify(sync_frequency=45)

        assert connector.sync_frequency == 60

    # Connector cannot be modified with invalid daily_sync_time
    def test_modification_with_invalid_daily_sync_time(self, mocker):
        client = Client()  # Create an instance of the Client class
        endpoint = Endpoint(client)  # Create an instance of the Endpoint class, passing the client argument
        connector = Connector(
            fivetran_id='123',
            service='service',
            schema='schema',
            paused=False,
            sync_frequency=60,
            pause_after_trial=False,
            group_id='group',
            connected_by='user',
            service_version=1,
            created_at=datetime.now(),
            endpoint=endpoint  # Pass the endpoint argument
        )
        # Rest of the test code





# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest

class TestConnectorEndpoint:

    # can generate the Connect Card URI for a connector
    def test_generate_connect_card_uri(self, mocker):
        client = Client()
        endpoint = ConnectorEndpoint(client)
        connector_id = "12345"
        redirect_uri = "https://example.com"
        hide_setup_guide = True

        expected_response = {"code": 200, "message": "Success", "data": {}}

        mock_response = mocker.Mock()
        mock_response.json.return_value = expected_response
        mocker.patch.object(endpoint, "_request", return_value=mock_response)

        response = endpoint.connect_card(connector_id, redirect_uri, hide_setup_guide)

        endpoint._request.assert_called_once_with(
            method="POST",
            url=f"{endpoint.BASE_URL}/connectors/{connector_id}/connect-card",
            json={"redirect_uri": redirect_uri, "hide_setup_guide": hide_setup_guide},
        )
        assert response == expected_response

    # can get metadata of configuration parameters and authorization parameters for a specified connector type
    def test_get_config_metadata(self, mocker):
        client = Client()
        endpoint = ConnectorEndpoint(client)
        service = "example_service"

        expected_response = mocker.Mock()
        expected_response.json.return_value = {"code": 200, "message": "Success", "data": {}}
    

        mocker.patch.object(endpoint, "_request", return_value=expected_response)

        response = endpoint.get_config_metadata(service)

        endpoint._request.assert_called_once_with(
            method="GET",
            url=f"{endpoint.BASE_URL}/metadata/connector-types/{service}",
        )
        assert response == {"code": 200, "message": "Success", "data": {}}

    # can get a connector
    def test_get_connector(self, mocker):
        client = Client()
        endpoint = ConnectorEndpoint(client)
        connector_id = "12345"

        expected_response = {
            "code": 200,
            "message": "Success",
            "data": {
                "fivetran_id": "12345",
                "service": "example_service",
                "schema": "example_schema",
                "paused": False,
                "sync_frequency": 60,
                "pause_after_trial": False,
                "group_id": "group_123",
                "connected_by": "user_123",
                "service_version": 1,
                "created_at": "2022-01-01T00:00:00Z",
            },
        }

        mock_response = mocker.Mock()
        mock_response.json.return_value = expected_response

        mocker.patch.object(endpoint, "_request", return_value=mock_response)

        response = endpoint.get_connector(connector_id)

        endpoint._request.assert_called_once_with(
            method="GET",
            url=f"{endpoint.BASE_URL}/connectors/{connector_id}",
        )
        assert isinstance(response, Connector)
        assert response.service == expected_response["data"]["service"]
        assert response.schema == expected_response["data"]["schema"]
        assert response.paused == expected_response["data"]["paused"]
        assert response.sync_frequency == expected_response["data"]["sync_frequency"]
        assert response.pause_after_trial == expected_response["data"]["pause_after_trial"]
        assert response.group_id == expected_response["data"]["group_id"]
        assert response.connected_by == expected_response["data"]["connected_by"]
        assert response.service_version == expected_response["data"]["service_version"]
        assert response.created_at == expected_response["data"]["created_at"]

    # can modify a connector with all optional parameters set to None
    def test_modify_connector_none_optional_parameters(self, mocker):
        client = Client()
        endpoint = ConnectorEndpoint(client)
        connector = Connector(
            fivetran_id="12345",
            service="example_service",
            schema="example_schema",
            paused=False,
            sync_frequency=60,
            pause_after_trial=False,
            group_id="group_123",
            connected_by="user_123",
            service_version=1,
            created_at="2022-01-01T00:00:00Z",
            endpoint=endpoint  # Pass 'endpoint' as an argument
        )

        expected_response = mocker.Mock()
        expected_response.json.return_value = {"code": 200, "message": "Success", "data": {}}

        mocker.patch.object(endpoint, "_request", return_value=expected_response)

        response = connector.modify()

        endpoint._request.assert_called_once_with(
            method="PATCH",
            url=connector.as_url,
            json={},
        )
        assert response == {"code": 200, "message": "Success", "data": {}}

    # can modify a connector with an invalid sync_frequency value
    def test_modify_connector_invalid_sync_frequency(self, mocker):
        client = Client()
        endpoint = ConnectorEndpoint(client)
        connector = Connector(
            fivetran_id="12345",
            service="example_service",
            schema="example_schema",
            paused=False,
            sync_frequency=30,
            pause_after_trial=False,
            group_id="group_123",
            connected_by="user_123",
            service_version=1,
            created_at="2022-01-01T00:00:00Z",
            endpoint=endpoint  # Added 'endpoint' argument
        )

        with pytest.raises(ApiError):
            connector.modify(sync_frequency=10)