# Generated by CodiumAI

import pytest

from pyfivetran.endpoints.roles import RoleEndpoint, ApiError

class TestRoleEndpoint:

    # Should be able to successfully retrieve a list of roles with default parameters
    def test_retrieve_roles_with_default_parameters(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.json.return_value = {'next_cursor': None}
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.return_value = response_mock

        # Create an instance of RoleEndpoint
        role_endpoint = RoleEndpoint(client_mock)

        # Call the method under test
        result = role_endpoint.list_roles()

        # Assertions
        assert isinstance(result, list)
        assert len(result) == 1
        assert result[0] == {'next_cursor': None}

    # Should be able to successfully retrieve a list of roles with a specified limit parameter
    def test_retrieve_roles_with_specified_limit_parameter(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.json.return_value = {'next_cursor': None}
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.return_value = response_mock

        # Create an instance of RoleEndpoint
        role_endpoint = RoleEndpoint(client_mock)

        # Call the method under test
        result = role_endpoint.list_roles(limit=10)

        # Assertions
        assert isinstance(result, list)
        assert len(result) == 1
        assert result[0] == {'next_cursor': None}

    # Should be able to handle pagination and retrieve a complete list of roles
    def test_retrieve_complete_list_of_roles(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock1 = mocker.Mock()
        response_mock1.json.return_value = {'next_cursor': 'cursor1'}
        response_mock2 = mocker.Mock()
        response_mock2.json.return_value = {'next_cursor': 'cursor2'}
        response_mock3 = mocker.Mock()
        response_mock3.json.return_value = {'next_cursor': None}
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.side_effect = [response_mock1, response_mock2, response_mock3]

        # Create an instance of RoleEndpoint
        role_endpoint = RoleEndpoint(client_mock)

        # Call the method under test
        result = role_endpoint.list_roles()

        # Assertions
        assert isinstance(result, list)
        assert len(result) == 3
        assert result[0] == {'next_cursor': 'cursor1'}
        assert result[1] == {'next_cursor': 'cursor2'}
        assert result[2] == {'next_cursor': None}

    # Should be able to handle a limit parameter of 0
    def test_handle_limit_parameter_of_zero(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.json.return_value = {'next_cursor': None}
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.return_value = response_mock

        # Create an instance of RoleEndpoint
        role_endpoint = RoleEndpoint(client_mock)

        # Call the method under test
        result = role_endpoint.list_roles(limit=0)

        # Assertions
        assert isinstance(result, list)
        assert len(result) == 1
        assert result[0] == {'next_cursor': None}

    # Should be able to handle a limit parameter greater than the maximum allowed by the API
    def test_handle_limit_parameter_greater_than_maximum_allowed(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.json.return_value = {'next_cursor': None}
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.return_value = response_mock

        # Create an instance of RoleEndpoint
        role_endpoint = RoleEndpoint(client_mock)

        # Call the method under test
        result = role_endpoint.list_roles(limit=1000)

        # Assertions
        assert isinstance(result, list)
        assert len(result) == 1
        assert result[0] == {'next_cursor': None}

    # Should be able to handle an invalid API response
    def test_handle_invalid_api_response(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.raise_for_status.side_effect = Exception('Invalid API response')
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.return_value = response_mock

        # Create an instance of RoleEndpoint
        role_endpoint = RoleEndpoint(client_mock)

        # Call the method under test and assert that it raises an ApiError
        with pytest.raises(ApiError):
            role_endpoint.list_roles()