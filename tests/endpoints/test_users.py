
# Generated by CodiumAI

import pytest

from pyfivetran.endpoints.users import UserEndpoint, User, Client, datetime, ApiError

class TestUser:

    # Creating a new User with all required fields should return a User object.
    def test_create_user_with_required_fields(self):
        client = Client()
        endpoint = UserEndpoint(client)
        user = User._from_dict(endpoint, {
            'id': '123',
            'email': 'test@example.com',
            'verified': True,
            'role': 'admin',
            'active': True,
            'created_at': '2022-01-01T00:00:00Z',
            'logged_in_at': '2022-01-01T00:00:00Z'
        })
        assert isinstance(user, User)
        assert user.fivetran_id == '123'
        assert user.email == 'test@example.com'
        assert user.verified == True
        assert user.role == 'admin'
        assert user.active == True
        assert user.created_at == datetime(2022, 1, 1, 0, 0, 0)
        assert user.logged_in_at == datetime(2022, 1, 1, 0, 0, 0)
        assert user.family_name == None
        assert user.given_name == None
        assert user.invited == None
        assert user.picture == None
        assert user.phone == None
        assert user._is_deleted == False

    # Inviting a user with all optional fields should return a User object.
    def test_invite_user_with_optional_fields(self, mocker):
        from unittest.mock import Mock
        client = Client()
        endpoint = UserEndpoint(client)
        mocker.patch.object(endpoint, '_request', return_value=Mock(json=lambda: {
            'code': 200,
            'message': None,
            'data': {
                'id': '123',
                'email': 'test@example.com',
                'verified': True,
                'role': 'admin',
                'active': True,
                'created_at': '2022-01-01T00:00:00Z',
                'logged_in_at': '2022-01-01T00:00:00Z',
                'family_name': 'Doe',
                'given_name': 'John',
                'invited': True,
                'picture': 'https://example.com/picture.jpg',
                'phone': '+1234567890'
            }
        }))
        user = endpoint.invite_user(
            email='test@example.com',
            family_name='Doe',
            given_name='John',
            phone='+1234567890',
            picture='https://example.com/picture.jpg',
            role='admin'
        )
        assert isinstance(user, User)
        assert user.fivetran_id == '123'
        assert user.email == 'test@example.com'
        assert user.verified == True
        assert user.role == 'admin'
        assert user.active == True
        assert user.created_at == datetime(2022, 1, 1, 0, 0, 0)
        assert user.logged_in_at == datetime(2022, 1, 1, 0, 0, 0)
        assert user.family_name == 'Doe'
        assert user.given_name == 'John'
        assert user.invited == True
        assert user.picture == 'https://example.com/picture.jpg'
        assert user.phone == '+1234567890'
        assert user._is_deleted == False


    # Creating a new User without a required field should assign None to the optional fields.
    def test_create_user_without_required_field(self):
        client = Client()
        endpoint = UserEndpoint(client)
        user = User._from_dict(endpoint, {
            'id': '123',
            'email': 'test@example.com',
            'verified': True,
            'role': 'admin',
            'active': True,
            'created_at': '2022-01-01T00:00:00Z',
            'logged_in_at': '2022-01-01T00:00:00Z'
        })
        assert user.fivetran_id == '123'
        assert user.email == 'test@example.com'
        assert user.verified == True
        assert user.role == 'admin'
        assert user.active == True
        assert user.created_at == datetime(2022, 1, 1, 0, 0, 0)
        assert user.logged_in_at == datetime(2022, 1, 1, 0, 0, 0)
        assert user.family_name == None
        assert user.given_name == None
        assert user.invited == None
        assert user.picture == None
        assert user.phone == None

    # Inviting a user with an invalid email should raise an error.
    def test_invalid_email_error(self, mocker):
        from unittest.mock import Mock
        client = Client()
        endpoint = UserEndpoint(client)
        mocker.patch.object(endpoint, '_request')
        mocker.patch.object(endpoint, '_paginate')
        mocker.patch.object(endpoint, '_request', return_value=Mock(json=Mock(return_value={'data': {}})))

        with pytest.raises(Exception):
            user = User(
                endpoint=endpoint,
                fivetran_id='123',
                email='test@example.com',
                verified=True,
                role='admin',
                active=True,
                created_at=datetime.now(),
                logged_in_at=datetime.now(),
                family_name='Doe'
            )
            user.invite_user(email='invalid_email', family_name='Doe', given_name='John')

    # Getting a list of users with a limit of 0 should return an empty list.
    def test_get_users_with_limit_zero_returns_empty_list(self, mocker):
        # Create a mock client and endpoint
        client = mocker.Mock()
        endpoint = UserEndpoint(client)

        # Create a mock response with an empty list of users
        response = mocker.Mock()
        response.json.return_value = {'data': {'items': []}}

        # Mock the _request method of the endpoint to return the mock response
        mocker.patch.object(endpoint, '_request', return_value=response)

        # Call the get_users method with a limit of 0
        users = endpoint.get_users(limit=0)

        # Assert that the returned value is an empty list
        assert users == []

    # Deleting a non-existent user should raise an error.
    def test_deleting_nonexistent_user_should_raise_error(self, mocker):
        # Mock the _request method of the UserEndpoint class
        mocker.patch.object(UserEndpoint, '_request')

        # Create a mock response for the _request method
        response = mocker.Mock()
        response.json.return_value = {
            'code': 404,
            'message': 'User not found',
            'data': None
        }

        # Set the mock response as the return value of the _request method
        UserEndpoint._request.return_value = response

        # Create a User instance with a non-existent user ID
        user = User(
            endpoint=UserEndpoint(Client()),
            fivetran_id='123',
            email='test@example.com',
            verified=True,
            role='admin',
            active=True,
            created_at=datetime(2022, 1, 1, 0, 0, 0),
            logged_in_at=datetime(2022, 1, 1, 0, 0, 0),
            family_name='Doe' # Provide a value for the 'family_name' argument
        )

        # Assert that deleting the user raises an error
        user.delete()