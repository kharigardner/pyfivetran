# Generated by CodiumAI

import pytest

from pyfivetran.endpoints.schema import ConnectorSchemaEndpoint, ApiError, BASE_API_URL, API_VERSION

class TestConnectorSchemaEndpoint:

    # Can modify connector column config with valid arguments
    def test_modify_connector_column_config_valid_arguments(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.json.return_value = {"code": 200, "message": "Success", "data": {}}
        built_request_mock = mocker.Mock()
        client_mock.build_request.return_value = built_request_mock
        client_mock.send.return_value = response_mock

        # Create an instance of ConnectorSchemaEndpoint
        endpoint = ConnectorSchemaEndpoint(client_mock)

        # Call the method under test
        result = endpoint.modify_connector_column_config(
            connector_id="123",
            schema_name="schema",
            table_name="table",
            column_name="column",
            enabled=True,
            hashed=False
        )

        # Assert the result
        assert result == {"code": 200, "message": "Success", "data": {}}
        client_mock.build_request.assert_called_once_with(
            method='PATCH',
            url=f'{BASE_API_URL}/{API_VERSION}/connectors/123/schemas/schema/tables/table/columns/column',
            json={"enabled": True, "hashed": False}
        )
        client_mock.send.assert_called_once_with(built_request_mock)
        response_mock.raise_for_status.assert_called_once()

    # Can modify connector database schema config with valid arguments
    def test_modify_connector_database_schema_config_valid_arguments(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.json.return_value = {"code": 200, "message": "Success", "data": {}}
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.return_value = response_mock

        # Create an instance of ConnectorSchemaEndpoint
        endpoint = ConnectorSchemaEndpoint(client_mock)

        # Call the method under test
        result = endpoint.modify_connector_database_schema_config(
            connector_id="123",
            schema_name="schema",
            enabled=True,
            tables={"table": {}}
        )

        # Assert the result
        assert result == {"code": 200, "message": "Success", "data": {}}
        client_mock.build_request.assert_called_once_with(
            method='PATCH',
            url='https://api.fivetran.com/v1/connectors/123/schemas/schema',
            json={"enabled": True, "tables": {"table": {}}}
        )
        client_mock.send.assert_called_once_with(client_mock.build_request.return_value)
        response_mock.raise_for_status.assert_called_once()

    # Can modify connector schema config with valid arguments
    def test_modify_connector_schema_config_valid_arguments(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.json.return_value = {"code": 200, "message": "Success", "data": {}}
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.return_value = response_mock

        # Create an instance of ConnectorSchemaEndpoint
        endpoint = ConnectorSchemaEndpoint(client_mock)

        # Call the method under test
        result = endpoint.modify_connector_schema_config(
            connector_id="123",
            schemas={"schema": {}},
            schema_change_handling="ALLOW_ALL"
        )

        # Assert the result
        assert result == {"code": 200, "message": "Success", "data": {}}
        client_mock.build_request.assert_called_once_with(
            method='PATCH',
            url=f'{BASE_API_URL}/{API_VERSION}/connectors/123/schemas',
            json={"schemas": {"schema": {}}, "schema_change_handling": "ALLOW_ALL"}
        )
        client_mock.send.assert_called_once()
        response_mock.raise_for_status.assert_called_once()

    # Raises ApiError when no payload is provided to modify_connector_column_config
    def test_modify_connector_column_config_no_payload(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.json.return_value = {"code": 400, "message": "Bad Request", "data": {}}
        client_mock.build_request.return_value = mocker.Mock()
        client_mock.send.return_value = response_mock

        # Create an instance of ConnectorSchemaEndpoint
        endpoint = ConnectorSchemaEndpoint(client_mock)

        # Call the method under test and assert that it raises an ApiError
        with pytest.raises(ApiError):
            endpoint.modify_connector_column_config(
                connector_id="123",
                schema_name="schema",
                table_name="table",
                column_name="column"
            )