# Generated by CodiumAI

import pytest
from pyfivetran.endpoints.destination import (
    DestinationEndpoint,
    Endpoint,
    Client,
    Destination,
    Region,
)
from unittest import mock


class TestDestination:
    # Creating a new destination with valid parameters returns a Destination object.
    def test_create_destination_valid_parameters(self, mocker):
        # Arrange
        mock_response = {
            "code": 200,
            "message": None,
            "data": {
                "id": "123",
                "service": "service",
                "region": "GCP_US_EAST4",
                "setup_status": "completed",
                "group_id": "group",
                "time_zone_offset": "0",
                "setup_tests": None,
                "config": None,
            },
        }
        mock_response_obj = mocker.Mock()
        mock_response_obj.json.return_value = mock_response
        mocker.patch.object(Endpoint, "_request", return_value=mock_response_obj)
        client = mocker.Mock(spec=Client)
        destination_endpoint = DestinationEndpoint(client)

        # Act
        destination = destination_endpoint.create_destination(
            group_id="group", service="service", time_zone_offset="0", config={}
        )

        # Assert
        assert isinstance(destination, Destination)
        assert destination.fivetran_id == "123"
        assert destination.service == "service"
        assert destination.region == Region.GCP_US_EAST4
        assert destination.setup_status == "completed"
        assert destination.group_id == "group"
        assert destination.time_zone_offset == "0"
        assert destination.setup_tests is None
        assert destination.config is None

    # Retrieving an existing destination with a valid ID returns a Destination object.
    def test_get_destination_valid_id_with_data_key(self, mocker):
        # Mock the _request method of the Endpoint class
        response_data = {
            "data": {
                "id": "123",
                "service": "service",
                "region": "GCP_US_EAST4",
                "setup_status": "completed",
                "group_id": "group",
                "time_zone_offset": "0",
                "setup_tests": None,
                "config": None,
            }
        }
        response = mocker.MagicMock()
        response.json.return_value = response_data
        mocker.patch.object(Endpoint, "_request", return_value=response)

        # Create a mock Client object
        client = mocker.Mock(spec=Client)

        # Create a DestinationEndpoint object with the mock Client
        destination_endpoint = DestinationEndpoint(client)

        # Retrieve a Destination object using the get_destination method
        destination = destination_endpoint.get_destination(destination_id="123")

        # Assert that the returned object is an instance of Destination
        assert isinstance(destination, Destination)
        # Assert that the properties of the Destination object match the expected values
        assert destination.fivetran_id == "123"
        assert destination.service == "service"
        assert destination.region == Region.GCP_US_EAST4
        assert destination.setup_status == "completed"
        assert destination.group_id == "group"
        assert destination.time_zone_offset == "0"
        assert destination.setup_tests is None
        assert destination.config is None

    # Modifying an existing destination with valid parameters returns a GeneralApiResponse object.
    def test_modify_destination_valid_parameters(self, mocker):
        # Mock the _request method of the Endpoint class
        mocker.patch.object(
            Endpoint,
            "_request",
            return_value=mocker.Mock(
                json=lambda: {"code": 200, "message": None, "data": {}}
            ),
        )

        # Create a mock Client object
        client = mocker.Mock(spec=Client)

        # Create a DestinationEndpoint object with the mock Client
        destination_endpoint = DestinationEndpoint(client)

        # Create a Destination object with some initial values
        destination = Destination(
            endpoint=destination_endpoint,
            fivetran_id="123",
            service="service",
            region=Region.GCP_US_EAST4,
            setup_status="completed",
            group_id="group",
            time_zone_offset="0",
        )

        # Modify the Destination object using the modify method
        response = destination.modify(
            region="GCP_US_WEST1",
            config={"key": "value"},
            trust_certificates=True,
            trust_fingerprints=False,
            run_setup_tests=True,
            time_zone_offset="1",
        )

        # Assert that the returned object is a dictionary and contains the keys 'code', 'message', and 'data'
        assert isinstance(response, dict)
        assert "code" in response
        assert "message" in response
        assert "data" in response

    # Creating a new destination with an invalid group ID raises a ValueError.
    def test_create_destination_invalid_group_id(self, mocker):
        # Create a mock Client object
        client = mocker.Mock(spec=Client)

        # Create a DestinationEndpoint object with the mock Client
        destination_endpoint = DestinationEndpoint(client)

        # Assert that creating a new destination with an invalid group ID raises a ValueError
        with pytest.raises(ValueError):
            destination_endpoint.create_destination(
                group_id="", service="service", time_zone_offset="0", config={}
            )

    # Creating a new destination with an invalid service name raises a ValueError.
    def test_create_destination_invalid_service_name(self, mocker):
        # Create a mock Client object
        client = mocker.Mock(spec=Client)

        # Create a DestinationEndpoint object with the mock Client
        destination_endpoint = DestinationEndpoint(client)

        # Assert that creating a new destination with an invalid service name raises a ValueError
        with pytest.raises(ValueError):
            destination_endpoint.create_destination(
                group_id="group", service="", time_zone_offset="0", config={}
            )

    # Creating a new destination with an invalid time zone offset raises a ValueError.
    def test_create_destination_invalid_time_zone_offset(self, mocker):
        # Create a mock Client object
        client = mocker.Mock(spec=Client)

        # Create a DestinationEndpoint object with the mock Client
        destination_endpoint = DestinationEndpoint(client)

        # Assert that creating a new destination with an invalid time zone offset raises a ValueError
        with pytest.raises(ValueError):
            destination_endpoint.create_destination(
                group_id="group",
                service="service",
                time_zone_offset="invalid",
                config={},
            )


class TestDestinationEndpoint:
    @pytest.fixture
    def destination_endpoint(self):
        client = mock.Mock(spec=Client)
        return DestinationEndpoint(client)

    def test_get_destination_valid_id(self, destination_endpoint):
        # Arrange
        destination_id = "123"
        mock_response = {
            "code": 200,
            "message": None,
            "data": {
                "id": "123",
                "service": "service",
                "region": "GCP_US_EAST4",
                "setup_status": "completed",
                "group_id": "group",
                "time_zone_offset": "0",
                "setup_tests": None,
                "config": None,
            },
        }
        mock_response_obj = mock.Mock()
        mock_response_obj.json.return_value = mock_response
        destination_endpoint._request = mock.Mock(return_value=mock_response_obj)

        # Act
        destination = destination_endpoint.get_destination(destination_id)

        # Assert
        assert isinstance(destination, Destination)
        assert destination.fivetran_id == "123"
        assert destination.service == "service"
        assert destination.region == Region.GCP_US_EAST4
        assert destination.setup_status == "completed"
        assert destination.group_id == "group"
        assert destination.time_zone_offset == "0"
        assert destination.setup_tests is None
        assert destination.config is None

    def test_create_destination_valid_parameters(self, destination_endpoint):
        # Arrange
        group_id = "group"
        service = "service"
        time_zone_offset = "0"
        config = {}
        mock_response = {
            "code": 200,
            "message": None,
            "data": {
                "id": "123",
                "service": "service",
                "region": "GCP_US_EAST4",
                "setup_status": "completed",
                "group_id": "group",
                "time_zone_offset": "0",
                "setup_tests": None,
                "config": None,
            },
        }
        mock_response_obj = mock.Mock()
        mock_response_obj.json.return_value = mock_response
        destination_endpoint._request = mock.Mock(return_value=mock_response_obj)

        # Act
        destination = destination_endpoint.create_destination(
            group_id, service, time_zone_offset, config
        )

        # Assert
        assert isinstance(destination, Destination)
        assert destination.fivetran_id == "123"
        assert destination.service == "service"
        assert destination.region == Region.GCP_US_EAST4
        assert destination.setup_status == "completed"
        assert destination.group_id == "group"
        assert destination.time_zone_offset == "0"
        assert destination.setup_tests is None
        assert destination.config is None

    def test_create_destination_invalid_group_id(self, destination_endpoint):
        # Arrange
        group_id = ""
        service = "service"
        time_zone_offset = "0"
        config = {}

        # Assert
        with pytest.raises(ValueError):
            destination_endpoint.create_destination(
                group_id, service, time_zone_offset, config
            )

    def test_create_destination_invalid_service_name(self, destination_endpoint):
        # Arrange
        group_id = "group"
        service = ""
        time_zone_offset = "0"
        config = {}

        # Assert
        with pytest.raises(ValueError):
            destination_endpoint.create_destination(
                group_id, service, time_zone_offset, config
            )

    def test_create_destination_invalid_time_zone_offset(self, destination_endpoint):
        # Arrange
        group_id = "group"
        service = "service"
        time_zone_offset = "invalid"
        config = {}

        # Assert
        with pytest.raises(ValueError):
            destination_endpoint.create_destination(
                group_id, service, time_zone_offset, config
            )
