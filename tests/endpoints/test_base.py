# Generated by CodiumAI

import pytest

from pyfivetran.endpoints.base import Endpoint, ApiError


# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest


class TestEndpoint:
    # Can make a successful API request with valid parameters
    def test_successful_api_request(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.raise_for_status.return_value = None
        response_mock.json.return_value = {"data": "example"}
        client_mock.send.return_value = response_mock

        # Create an instance of Endpoint with the mocked client
        endpoint = Endpoint(client_mock)

        # Call the _request method with valid parameters
        response = endpoint._request(url="https://api.example.com", method="GET")

        # Assert that the response is as expected
        assert response == response_mock

    # Can handle and raise an ApiError if API request fails
    def test_api_request_failure(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.raise_for_status.side_effect = Exception("API request failed")
        response_mock.text = "Error message"
        client_mock.send.return_value = response_mock

        # Create an instance of Endpoint with the mocked client
        endpoint = Endpoint(client_mock)

        # Call the _request method with invalid parameters
        with pytest.raises(ApiError) as e:
            endpoint._request(url="https://api.example.com", method="GET")

    # Can paginate through API responses and return a list of responses
    def test_pagination_fixed(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        first_response_mock = mocker.Mock()
        first_response_mock.raise_for_status.return_value = None
        first_response_mock.json.return_value = {
            "data": "example",
            "next_cursor": "123",
        }
        next_response_mock = mocker.Mock()
        next_response_mock.raise_for_status.return_value = None
        next_response_mock.json.return_value = {"data": "example", "next_cursor": None}
        client_mock.send.side_effect = [first_response_mock, next_response_mock]

        # Create an instance of Endpoint with the mocked client
        endpoint = Endpoint(client_mock)

        # Call the _paginate method with valid parameters
        responses = endpoint._paginate(first_response_mock, "/api/endpoint")

        # Assert that the responses list is as expected
        assert responses == [
            first_response_mock,
            first_response_mock,
            next_response_mock,
        ]

    # Can handle and raise an ApiError if API request returns a response with invalid JSON
    def test_invalid_json_response_with_mocked_raise_for_status(self, mocker):
        # Mock the necessary dependencies
        client_mock = mocker.Mock()
        response_mock = mocker.Mock()
        response_mock.raise_for_status.side_effect = Exception("Invalid JSON")
        response_mock.json.side_effect = ValueError("Invalid JSON")
        response_mock.text = "Mocked response text"
        client_mock.send.return_value = response_mock

        # Create an instance of Endpoint with the mocked client
        endpoint = Endpoint(client_mock)

        # Call the _request method with valid parameters
        with pytest.raises(ApiError) as e:
            endpoint._request(url="https://api.example.com", method="GET")
